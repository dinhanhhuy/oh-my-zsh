# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH=/Users/huyda/.oh-my-zsh

# Set name of the theme to load. Optionally, if you set this to "random"
# it'll load a random theme each time that oh-my-zsh is loaded.
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/rsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

#custom variable
eval $(thefuck --alias)

#custom function
alias reload="source ~/.zshrc"
alias chrome="open -a 'Google Chrome'"
alias weather="curl http://wttr.in/Saigon,Vietnam?lang=en | less"
cal1() {
  cal | grep --color -EC6 "\b$(date +%e | sed "s/ //g")";
}
quote() {
  cal1;
  strQuote="$(echo 'time never comes back \n\r girlfriend sometime does...\n\rI'\''m a coder\n\r100% i code!!!' | cowsay -e '><')"
  line="\n";
  str=$strCal$line$strQuote;
  echo ${str}
}
quote

#react-native
alias rn="react-native"
alias rn1="react-native run-ios"
alias rn2="react-native run-android"

#waxii shortcus config
alias project="cd ~/Desktop/Project/"
alias wxbackend="cd ~/Desktop/Project/\[PHP\]Waxii/backend/"
alias wxmail="cd ~/Desktop/Project/\[PHP\]MailService/backend-mail"
alias wxios="cd ~/Desktop/Project/\[iOS\]\ waxii/ios/"
alias wxdoc="node ~/Desktop/Project/\[PHP\]Waxii/backend/public/_doc/build.js"

sshvyt() {
  sshpass -p "VytgrouP12#" ssh -o VisualHostKey=yes root@139.59.225.231
}

tvyt() {
  sshvyt()
  tlog $*
}

tvyt1() {
  sshvyt()
  tlog1 $*
}

sshtest() {
  sshpass -p "MMS1@3456" ssh -o VisualHostKey=yes dahuy@192.168.10.147
}

sshjenkin() {
  sshpass -p "123456" ssh -o VisualHostKey=yes vqminh@192.168.10.202
}

sshdev() {
  sshpass -p "MMS1@3456" ssh -o VisualHostKey=yes dahuy@192.168.10.65
}

sshrelease() {
  ssh -i /Users/huyda/sshkey/mac_mini_02 root@192.168.10.13 $*
}

sshbss() {
  ssh -i ~/sshkey/mac_mini_02 huyda@35.227.22.166 $*
}

sshflex() {
  sshpass -p "MMS123456" ssh -o VisualHostKey=yes dahuy@192.168.10.11 $*
}

#custom
alias cls="clear"
alias history="history | less"

#mark
alias bee="echo 🐝 🐝 🐝 🐝 🐝 🐝 🐝 🐝 🐝 🐝 🐝 🐝 🐝 🐝 🐝 🐝 🐝 🐝 🐝 🐝 🐝 🐝 🐝 🐝 🐝 🐝 🐝 🐝 🐝 🐝 🐝 🐝 🐝 🐝"
alias rocket="echo 🚀 🚀 🚀 🚀 🚀 🚀 🚀 🚀 🚀 🚀 🚀 🚀 🚀 🚀 🚀 🚀 🚀 🚀 🚀 🚀 🚀 🚀 🚀 🚀 🚀 🚀 🚀 🚀 🚀 🚀 🚀 🚀 🚀 🚀 "
alias apple="echo 🍎 🍎 🍎 🍎 🍎 🍎 🍎 🍎 🍎 🍎 🍎 🍎 🍎 🍎 🍎 🍎 🍎 🍎 🍎 🍎 🍎 🍎 🍎 🍎 🍎 🍎 🍎 🍎 🍎 🍎 🍎 🍎 🍎 🍎 "

#git alias
alias zshbackup="cp /Users/huyda/.zshrc /Users/huyda/.oh-my-zsh/.zshrc-cached"
alias grpm="git request-pull origin/master $*"
alias gm1="git merge --no-ff --no-commit $*"
alias gma="git merge --abort $*"
alias gl="git log $*"
alias gd1="gd --cached $*"
alias gc0="git checkout master $*"
alias gc1="git checkout $*"
alias ip1="ipconfig getifaddr en1 $*"
alias rm1="trash $*"
alias gba1="git for-each-ref --format='%(committerdate) %09 %(authorname) %09 %(refname)' | sort -k5n -k2M -k3n -k4n"

detectcommit() {
  if [[ ! -z "$(git status --porcelain)" ]]; then
    echo "$(tput setaf 3)Detect uncommitted changes$(tput setaf 1)"
    gss
    read -n -q "reply?$(tput setaf 1)do you want continue $1?[y/n]$(tput setaf 2)"
    echo "$(tput setaf 0)"
    if [[ ! $reply =~ ^[Yy]$ ]]
    then
      echo "$(tput setaf 3)stop $1"
      return 0
    fi
  fi
}

zshreload() {
  echo "diff -c ~/.zshrc ~/.oh-my-zsh/.zshrc-cached | colordiff"
  diff -c ~/.zshrc ~/.oh-my-zsh/.zshrc-cached | colordiff
  rinput "$(tput setaf 0)Update current setting$(tput setaf 1)" "$(tput setaf 3)skip"
  if [[ $? == 0 ]]; then
    echo "$(tput setaf 2)cp ~/.zshrc ~/.zshrc-cached"
    cp ~/.zshrc ~/.zshrc-cached
    echo "$(tput setaf 2)cp ~/.oh-my-zsh/.zshrc-cached ~/.zshrc"
    cp ~/.oh-my-zsh/.zshrc-cached ~/.zshrc
    return 0
  fi
  echo 
}

diff1() {
  diff -c $1 $2 | colordiff 
}

rinput() {
  read -n -q "reply?$(tput setaf 1)$1[y/n]$(tput setaf 2)"
  echo "$(tput setaf 0)"
  if [[ ! $reply =~ ^[Yy]$ ]] then
    echo "$(tput setaf 3)$2"
    return 1
  fi
  return 0
}

deployflex() {
  detectcommit "deploy"
  sshpass -p "MMS123456" ssh -o VisualHostKey=yes dahuy@192.168.10.11 "echo MMS12345 | sudo -S deploy"
}

flexscpdb() {
  echo "ssh + export db"
  sshflex "mysqldump -u root flex_v2_db > /home/dahuy/backup.sql"
  echo "transfer db $?"
  scp dahuy@192.168.10.11:/home/dahuy/table_backup.sql backup.sql
  echo "import db to local $?"
  mysql -uroot -proot! flex_v2_db < backup.sql
  echo "return $?"
}

flexdoc() {
  fl_doc_group=$1
  fl_doc_module=$2
  fl_doc_function=$3

  fl_doc_module_lower="$(echo $fl_doc_module | tr '[:upper:]' '[:lower:]')s"
  fl_doc_function_lower="$(echo $fl_doc_function | tr '[:upper:]' '[:lower:]')s"
  #read and replace text in api document
  fl_file_content="$(cat ~/.flex-api-doc)"
  fl_file_content=${fl_file_content//{{module_lower}}/$fl_doc_module_lower}
  fl_file_content=${fl_file_content//{{function_lower}}/$fl_doc_function_lower}
  fl_file_content=${fl_file_content//{{module}}/$fl_doc_module}
  fl_file_content=${fl_file_content//{{function}}/$fl_doc_function}
  fl_file_content=${fl_file_content//{{group}}/$fl_doc_group}
}

flexcreates() {
  echo 'input module names'
  while read line; do
    fl_input_module_name=$line
    flexcreate $fl_input_module_name
  done
}

flexcreate() {
  fl_prefix=$1
  declare -a fl_arr=("Create" "Delete" "Update" "Search" "Suspend")
  fl_folder="$(echo $fl_prefix | tr '[:upper:]' '[:lower:]')s"
  fl_module_path="$PWD/$fl_folder"
  mkdir $fl_folder
  echo "create module $(tput setaf 2)$fl_module_path$(tput setaf 0)"

  for fl_module in "${fl_arr[@]}"; do
    flexdoc $fl_prefix $fl_prefix $fl_module

    fl_file_name="$fl_prefix$fl_module.js"
    fl_file_path="$fl_module_path/$fl_file_name"
    echo "create file $(tput setaf 2)$fl_path/$fl_file_name$(tput setaf 0)"
    fl_file_content+="\nconst $fl_prefix$fl_module =  (req, res, next) => {\n\tres.json(\"$fl_module done\");\n}\nmodule.exports = {\n\t$fl_prefix$fl_module\n}"
    echo $fl_file_content > $fl_file_path
  done
}

wxtest() {
  ~/Desktop/Project/\[PHP\]Waxii/backend/vendor/bin/phpunit $*
}

wxdeploy1() {
  echo "$(tput setaf 3)start get scrumb$(tput setaf 0)"
  crumb=$(curl -u "nndhuy:123456" 'http://192.168.10.202:8087/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,":",//crumb)')
  
  #start deploy to dev 
  echo "$(tput setaf 2)crumb: [$crumb]"
  echo "$(tput setaf 3)start run job [update-dev__waxii-backend]$(tput setaf 0)"
  result=$(curl -X POST -H "$crumb" http://192.168.10.202:8087/job/update-dev__waxii-backend/build --user nndhuy:e5ae33cc831464fc98ba1736a83158bb)
  echo "$(tput setaf 2)result: [$result]$(tput setaf 0)"

  #check deploy to dev finish
  echo "$(tput setaf 3)waiting job [update-dev__waxii-backend] finish$(tput setaf 0)"
  JOB_URL=http://192.168.10.202:8087/job/update-dev__waxii-backend
  JOB_STATUS_URL=${JOB_URL}/lastBuild/api/json

  GREP_RETURN_CODE=0
  # Poll every thirty seconds until the build is finished
  while [ $GREP_RETURN_CODE -eq 0 ]
  do
    sleep 30
    # Grep will return 0 while the build is running:
    curl --silent $JOB_STATUS_URL | grep result\":null > /dev/null
    GREP_RETURN_CODE=$?
  done
  echo "$(tput setaf 2)job [update-dev__waxii-backend] process finish$(tput setaf 0)"

  #start deploy to test
  echo "$(tput setaf 3)start run job [dev-test__waxii-backend]$(tput setaf 0)"
  result=$(curl -X POST -H "$crumb" http://192.168.10.202:8087/job/dev-test__waxii-backend/build --user nndhuy:e5ae33cc831464fc98ba1736a83158bb)
  echo "$(tput setaf 2)result: [$result]$(tput setaf 0)"
  
  echo "$(tput setaf 3)deploy to release server$(tput setaf 1)"
  read -n -q "reply?are you sure? [y/n]$(tput setaf 2)"
  echo "$(tput setaf 0)"
  if [[ $reply =~ ^[Yy]$ ]]
  then
    echo "$(tput setaf 3)start [git pull origin master]$(tput setaf 0)"
    sshrelease "cd '/var/www/html/waxii-backend' && git pull "http://vxvinh:MMS1234566@bitbucket.mmsoft.vn/scm/waxii/backend.git" master && git show --summary"
    return 0
  else
    echo "$(tput setaf 3)stop deploy server release"
  fi
}

wxdeploy() {
  if [[ ! -z "$(git status --porcelain)" ]]; then 
    echo "$(tput setaf 3)Detect uncommitted changes$(tput setaf 1)"
    gss
    read -n -q "reply?$(tput setaf 1)do you want continue deploy?[y/n]$(tput setaf 2)"
    echo "$(tput setaf 0)" 
    if [[ ! $reply =~ ^[Yy]$ ]]
    then
      echo "$(tput setaf 3)stop deploy"
      return 0
    fi
  fi

  echo "$(tput setaf 3)start testing$(tput setaf 0)"
  wxtest $*
  if [[ $? == 0 ]] then #success case
    echo "$(tput setaf 2)test success, start deploy$(tput setaf 0)"    
    wxdeploy1
  else #fail case
    echo "$(tput setaf 3)test error$(tput setaf 1)"
    read -n -q "reply?do you want continue deploy?[y/n]$(tput setaf 2)"
    echo "$(tput setaf 0)"
    if [[ $reply =~ ^[Yy]$ ]]
    then
      echo "$(tput setaf 3)start deploy$(tput setaf 0)"
      wxdeploy1
    else
      echo "$(tput setaf 3)stop deploy"
    fi
  fi

}

gbf() {
  branchPrefix="feature/"
  prefixLen=${#branchPrefix}
  newBranch=""
  if [[ $* =~ "$branchPrefix*" ]]; then
    newBranch="$branchPrefix${*:$prefixLen:300}"
    echo "$(tput setaf 3)found prefix in branch name, attemp rename to: $(tput setaf 1) $newBranch"
    read -n -q "reply?are you sure? [y/n]"
    echo "\r" 
    if [[ ! $reply =~ ^[Yy]$ ]]
    then
      tput setaf 1; echo "stop create new branch"
      return 0
    fi
  else
    newBranch="$branchPrefix$*"
  fi
  echo "$(tput setaf 0)git checkout -b";
  git checkout -b "$newBranch"
}

gbh() {
  echo "git checkout -b hotfix/$*"
  git checkout -b "hotfix/$*"
}

gbb() {
  echo "git checkout -b bug/$*"
  git checkout -b "bug/$*"
}

gbi() {
  echo "git checkout -b bug/$*"
  git checkout -b "bug/$*"
}

gp1() {
  currentBranch=$(git branch | sed -n -e 's/^\* \(.*\)/\1/p')
  git pull origin $currentBranch
}

gmb() {
  rawbranchs=$(git branch --merged $1 | egrep -v "(^\*|master|develop)")
  if [[ $2 == "-s" ]]; then
    return 0
  fi
  echo $rawbranchs
}

gdmb() {
  gmb develop -s
  echo "$rawbranchs" | while read each
  do
    rinput "$(tput setaf 0)delete branch$(tput setaf 1) $each$(tput setaf 0)" "skip"
    if [[ $? == 0 ]]; then
      git branch -d $each
      git push origin --delete $each
    fi
  done
}

gl1() {
  git log --graph --oneline --decorate --all
}

gl2() {
  git log --graph --abbrev-commit --decorate --date=relative --all
}

gltd() {
  today=$(echo date +'%m/%d/%Y')
  author="dahuy"
  gld $author $today
}

gld() {
  git log --pretty=oneline --abbrev-commit --author=$1 --after="$2 0:0:0" --before="$2 23:59:59"
}
